{"version":3,"sources":["Coin.js","CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Coin","props","className","src","info","imgSrc","alt","side","CoinContainer","coins","useState","currCoin","nFlips","nHeads","nTails","state","setState","flipCoin","arr","newCoin","Math","floor","random","length","st","onClick","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAaeA,MAVf,SAAeC,GAEX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKF,EAAMG,KAAKC,OAAQC,IAAKL,EAAMG,KAAKG,SCmDtCC,MArDf,WAEG,IAAMC,EAAO,CACV,CAAEF,KAAM,QAASF,OAAQ,gCACzB,CAAEE,KAAM,QAASF,OAAQ,iCAJP,EAcEK,mBAAS,CAC7BC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,IAlBU,mBAcdC,EAdc,KAcRC,EAdQ,KAuBtB,SAASC,IACP,IC7BYC,ED6BNC,GC7BMD,ED6BWT,GC5BLW,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SD6BjDP,GAAS,SAAAQ,GACP,MAAO,CACLb,SAAUQ,EACVP,OAAQY,EAAGZ,OAAS,EACpBC,OAAQW,EAAGX,QAA2B,UAAjBM,EAAQZ,KAAmB,EAAI,GACpDO,OAAQU,EAAGV,QAA2B,UAAjBK,EAAQZ,KAAmB,EAAI,OASxD,OACE,yBAAKL,UAAU,iBACb,kDACCa,EAAMJ,UAAY,kBAAC,EAAD,CAAMP,KAAMW,EAAMJ,WACrC,4BAAQc,QARd,SAAqBC,GACrBT,MAOM,YACA,qCACUF,EAAMH,OADhB,2BACgDG,EAAMF,OAAQ,IAD9D,aAEaE,EAAMD,OAFnB,a,MEnCOa,MAVf,WAEI,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCIY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00cac574.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Coin.css\";\n\nfunction Coin (props) {\n \n    return (\n      <div className='Coin'>\n        <img src={props.info.imgSrc} alt={props.info.side} />\n      </div>\n    );\n\n}\n\nexport default Coin;\n","import React, { useState } from \"react\";\nimport Coin from \"./Coin\";\nimport { choice } from \"./helpers\";\n\n\nfunction CoinContainer(){\n \n   const coins= [\n      { side: \"heads\", imgSrc: \"https://tinyurl.com/y6xrnng9\" },\n      { side: \"tails\", imgSrc: \"https://tinyurl.com/y36eltzd\" }\n    ];\n \n  // const initState= {\n  //     currCoin: null,\n  //     nFlips: 0,\n  //     nHeads: 0,\n  //     nTails: 0\n  //   };\n\n    const[state,setState]=useState({\n      currCoin: null,\n      nFlips: 0,\n      nHeads: 0,\n      nTails: 0\n    });\n\n  \n  \n  function flipCoin() {\n    const newCoin = choice(coins);\n    setState(st => {\n      return {\n        currCoin: newCoin,\n        nFlips: st.nFlips + 1,\n        nHeads: st.nHeads + (newCoin.side === \"heads\" ? 1 : 0),\n        nTails: st.nTails + (newCoin.side === \"tails\" ? 1 : 0)\n      };\n    });\n  }\n\n  function handleClick(e) {\n  flipCoin();\n  }\n \n    return (\n      <div className='CoinContainer'>\n        <h2>Let's Flip A Coin!</h2>\n        {state.currCoin && <Coin info={state.currCoin} />}\n        <button onClick={handleClick}>Flip Me!</button>\n        <p>\n          Out of {state.nFlips} flips, there have been {state.nHeads}{\" \"}\n          heads and {state.nTails} tails.\n        </p>\n      </div>\n    );\n\n}\n\nexport default CoinContainer;\n","function choice(arr) {\n    let randomIndex = Math.floor(Math.random() * arr.length);\n    return arr[randomIndex];\n  }\n  \n  export { choice };\n  ","import React from \"react\";\nimport CoinContainer from \"./CoinContainer\";\nimport \"./App.css\";\n\nfunction App (){\n  \n    return (\n      <div className='App'>\n        <CoinContainer />\n      </div>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}